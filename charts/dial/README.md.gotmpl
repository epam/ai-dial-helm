{{ template "chart.header" . }}

{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

## Prerequisites

- Helm 3.8.0+
- PV provisioner support in the underlying infrastructure (optional)
- Ingress controller support in the underlying infrastructure (optional)

{{ template "chart.requirementsSection" . }}

## Installing the Chart

To install the chart with the release name `my-release`:

```console
helm repo add dial https://charts.epam-rail.com
helm install my-release dial/dial
```

The command deploys AI DIAL on the Kubernetes cluster with default configuration. The [Parameters](#parameters) section lists the parameters that can be configured during installation.

## Examples

Due to flexibility of the system, it's impossible to define default values for all parameters and cover all use cases.\
However, we provide a set of [examples](examples) that can be used as a good starting point for your own configuration.

## Uninstalling the Chart

To uninstall/delete the `my-release` deployment:

```console
helm delete my-release
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

**NOTE**: Persistent Volumes created by StatefulSets won't be deleted automatically

## Parameters

Specify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example:

```console
helm install my-release dial/dial --set chat.image.tag=latest
```

Alternatively, a YAML file that specifies the values for the above parameters can be provided while installing the chart. For example:

```yaml
# values.yaml file content
chat:
  image:
    tag: latest
```

```console
helm install my-release dial/dial -f values.yaml
```

**NOTE**: You can use the default [values.yaml](values.yaml)

{{ template "chart.valuesSection" . }}

## Upgrading

### To 3.0.0

In this version we have to reflect `ai-dial-core` [application configuration parameters renaming](https://github.com/epam/ai-dial-core/pull/455) in version `0.15.1+` by renaming several values in this chart.

- `core.configuration.encryption.password` parameter is renamed to `core.configuration.encryption.secret`
- `core.configuration.encryption.salt` parameter is changed to `core.configuration.encryption.key`

### How to upgrade to version 3.0.0

a) If using encryption Kubernetes secret created by the chart:

1. Update the parameters you have in your current deployment values (e.g. `values.yaml` file or set via `--set`) according to the changes below:
     - `core.configuration.encryption.password` --> `core.configuration.encryption.secret`
     - `core.configuration.encryption.salt` --> `core.configuration.encryption.key`
1. Delete the `*-encryption` secret, e.g. (replace `my-release` with the actual release name):

    ```console
    kubectl delete secret my-release-dial-core-encryption
    ```

1. Proceed with the helm upgrade as usual, e.g.:

    ```console
    helm upgrade my-release dial/dial -f values.yaml
    ```

b) If using your own managed Kubernetes secret (`core.configuration.encryption.existingSecret` is set):

1. Rename keys in your existing secret:

    - `aidial.encryption.password` --> `aidial.encryption.secret`
    - `aidial.encryption.salt` --> `aidial.encryption.key`

    You can update your existing secret to rename or move the keys using the following one-liner command (replace `<your-existing-secret-name>` and `<namespace>` with the actual values):

    ```console
      kubectl get secret <your-existing-secret-name> -o yaml -n <namespace> | jq '.data["aidial.encryption.secret"] = .data["aidial.encryption.password"] | .data["aidial.encryption.key"] = .data["aidial.encryption.salt"] | del(.data["aidial.encryption.password"], .data["aidial.encryption.salt"])' | kubectl replace -f -
    ```

1. Proceed with the helm upgrade as usual, e.g.:

    ```console
    helm upgrade my-release dial/dial -f values.yaml
    ```
