### Global parameters ###
global:
  # -- Global Docker image registry
  imageRegistry: ""
  # -- Global Docker registry secret names as an array
  imagePullSecrets: []
  # -- Global StorageClass for Persistent Volume(s)
  storageClass: ""
  compatibility:
    openshift:
      ## -- Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)
      adaptSecurityContext: disabled

# -- String to partially override common.names.name
nameOverride: ""
# -- String to fully override common.names.fullname
fullnameOverride: ""
# -- String to fully override common.names.namespace
namespaceOverride: ""
# -- Labels to add to all deployed objects
commonLabels: {}
# -- Annotations to add to all deployed objects
commonAnnotations: {}

# -- Array of extra objects to deploy with the release
extraDeploy: []

diagnosticMode:
  # -- Enable diagnostic mode (all probes will be disabled)
  enabled: false

# -- Section to configure the image.
# @default -- [Documentation](https://kubernetes.io/docs/concepts/containers/images/)
image:
  # -- Image registry
  registry: docker.io
  # -- Image repository
  repository: epam/ai-dial-core
  # -- Image tag (immutable tags are recommended)
  tag: latest
  # -- Image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
  digest: ""
  # -- Image pull policy
  pullPolicy: IfNotPresent
  # -- Optionally specify an array of imagePullSecrets.
  # Secrets must be manually created in the namespace.
  # [Documentation](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
  pullSecrets:
    []
    # - myRegistryKeySecretName

# -- Annotations to add to dial-core deployed objects
annotations: {}
# -- Labels to add to dial-core deployed objects
labels: {}
# -- Number of dial-core replicas to deploy
replicaCount: 1

containerPorts:
  # -- dial-core HTTP container port
  http: 8080
  # -- dial-core HTTP container port for metrics
  metrics: 9464

# -- Liveness Probes configuration
# @default -- [Documentation](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  # -- Enable/disable livenessProbe
  enabled: false
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 12

# -- Readiness Probes configuration
# @default -- [Documentation](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
readinessProbe:
  # -- Enable/disable readinessProbe
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 6

# -- Startup Probes configuration
# @default -- [Documentation](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
startupProbe:
  # -- Enable/disable startupProbe
  enabled: false
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 6
  successThreshold: 1
# -- Custom livenessProbe that overrides the default one
customLivenessProbe: {}
# -- Custom readinessProbe that overrides the default one
customReadinessProbe: {}
# -- Custom startupProbe that overrides the default one
customStartupProbe: {}

# -- dial-core resource requests and limits
# [Documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
resources: {}

# -- Pods Security Context Configuration
# @default -- [Documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
podSecurityContext:
  # -- Enabled dial-core pod's Security Context
  enabled: true
  # -- Set filesystem group change policy
  fsGroupChangePolicy: Always
  # -- Set kernel settings using the sysctl interface
  sysctls: []
  # -- Set filesystem extra groups
  supplementalGroups: []
  # -- Set dial-core pod's Security Context fsGroup
  fsGroup: 1001

# -- Container Security Context Configuration
# @default -- [Documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
containerSecurityContext:
  # -- Enabled dial-core container's Security Context
  enabled: true
  # -- Set dial-core SELinux options in container
  seLinuxOptions: {}
  # -- Set dial-core container's Security Context runAsUser
  runAsUser: 1001
  # -- Set dial-core container's Security Context runAsGroup
  runAsGroup: 1001
  # -- Set dial-core containers' Security Context runAsNonRoot
  runAsNonRoot: true
  # -- Set dial-core container's Security Context privileged
  privileged: false
  # -- Set dial-core containers' Security Context runAsNonRoot
  readOnlyRootFilesystem: false
  # -- Set dial-core container's Security Context allowPrivilegeEscalation
  allowPrivilegeEscalation: false
  # -- Set dial-core container's Security Context capabilities
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    # -- Set dial-extension container's Security Context seccomp profile
    type: "RuntimeDefault"

# -- Override default dial-core command (useful when using custom images)
command: []
# -- Override default dial-core args (useful when using custom images)
args: []
# -- Mount Service Account token in pods
automountServiceAccountToken: false
# -- dial-core pods host aliases
# [Documentation](https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/)
hostAliases: []
# -- Extra labels for dial-core pods
# [Documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
podLabels: {}
# -- Annotations for dial-core pods
# [Documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)
podAnnotations: {}

# -- Pod Disruption Budget configuration
# @default -- [Documentation](https://kubernetes.io/docs/tasks/run-application/configure-pdb)
pdb:
  # -- Enable/disable a Pod Disruption Budget creation
  create: false

### Autoscaling configuration ###
autoscaling:
  # -- Horizontal Pod Autoscaler (HPA) settings
  # @default -- [Documentation](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/)
  hpa:
    # -- Enable HPA
    enabled: false
    # -- Annotations for HPA resource
    annotations: {}
    # -- HPA Behavior
    behavior: {}
    # -- Minimum number of replicas
    minReplicas: 1
    # -- Maximum number of replicas
    maxReplicas: 3
    # -- Target CPU utilization percentage
    targetCPU: ""
    # -- Target Memory utilization percentage
    targetMemory: ""
    # -- HPA Custom rules
    customRules: []

# -- Affinity for dial-core pods assignment
affinity: {}
# -- Node labels for dial-core pods assignment
# [Documentation](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector)
nodeSelector: {}
# -- Tolerations for dial-core pods assignment
# [Documentation](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)
tolerations: []

# -- Deployment strategy type
# @default -- [Documentation](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies)
updateStrategy:
  # -- StrategyType
  # Can be set to RollingUpdate or OnDelete
  type: RollingUpdate

# -- dial-core pods' priorityClassName
priorityClassName: ""
# -- Topology Spread Constraints for pod assignment spread across your cluster among failure-domains (evaluated as a template)
# [Documentation](https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods)
topologySpreadConstraints: []
# -- Name of the k8s scheduler (other than default) for dial-core pods
# [Documentation](https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/)
schedulerName: ""
# -- Seconds dial-core pod needs to terminate gracefully
# [Documentation](https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods)
terminationGracePeriodSeconds: ""
# -- for the dial-core container(s) to automate configuration before or after startup
lifecycleHooks: {}

# Application-specific configuration values
configuration:
  # Encryption configuration used in dial-core, e.g. for blob storage
  encryption:
    # -- Random string used to encrypt sensitive data
    # e.g. `pwgen -s 32 1`
    # WARNING: Autogenerated if not set during first installation.
    # Changing this value after first installation takes no effect without existing secret removal.
    # Changing this value in the middle of environment lifecycle WILL cause access loss to already encrypted data.
    secret: ""
    # -- Random string used to encrypt sensitive data
    # e.g. `pwgen -s 32 1`
    # WARNING: Autogenerated if not set during first installation.
    # WARNING: Changing this value after first installation takes no effect without existing secret removal.
    # Changing this value in the middle of environment lifecycle WILL cause access loss to already encrypted data.
    key: ""
    # -- The name of the Kubernetes secret containing the encryption "secret" and "key" values.
    # WARNING: Changing this value in the middle of environment lifecycle WILL cause access loss to already encrypted data.
    existingSecret: ""
# -- Key-value pairs extra environment variables to add to dial-core
env:
  {}
  # key1: "value1"
  # key2: "value2"
# -- Key-value pairs extra environment variables to add in environment variables from secrets to dial-core
secrets:
  {}
  # key1: "value1"
  # key2: "value2"
# -- Name of existing Secret containing extra env vars for dial-core containers
extraEnvVarsSecret: ""
# -- Optionally specify extra list of additional volumes for the dial-core pod(s)
extraVolumes: []
# -- Optionally specify extra list of additional volumeMounts for the dial-core container(s)
extraVolumeMounts: []
# -- Add additional sidecar containers to the dial-core pod(s)
sidecars:
  []
  # - name: your-image-name
  #   image: your-image
  #   imagePullPolicy: Always
  #   ports:
  #     - name: your-port-name
  #       containerPort: 1234
# -- Add additional init containers to the dial-extension pod(s)
# [Documentation](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)
initContainers:
  []
  # - name: your-image-name
  #   image: your-image
  #   imagePullPolicy: Always
  #   command: ["sh", "-c", 'echo "hello world"']

# -- Enable Host Network
# If hostNetwork true, then dnsPolicy is set to ClusterFirstWithHostNet
hostNetwork: false

# -- Service configuration
# @default -- [Documentation](https://kubernetes.io/docs/concepts/services-networking/service/)
service:
  # -- dial-core service type
  type: ClusterIP
  ports:
    # -- dial-core service HTTP port
    http: 80
  # -- Node ports to expose
  # NOTE: choose port between <30000-32767>
  nodePorts:
    # -- Node port for HTTP
    http: ""
  # -- dial-core service Cluster IP
  # clusterIP: None
  clusterIP: ""
  # -- dial-core service Load Balancer IP.
  # [Documentation](https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer)
  loadBalancerIP: ""
  # -- dial-core service Load Balancer sources
  loadBalancerSourceRanges:
    []
    # - 10.10.10.0/24
  # -- dial-core service external traffic policy
  # [Documentation](http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip)
  externalTrafficPolicy: Cluster
  # -- Additional custom annotations for dial-core service
  annotations: {}
  # -- Extra ports to expose in dial-core service (normally used with the `sidecars` value)
  extraPorts: []
  # -- Control where client requests go, to the same pod or round-robin
  # Values: ClientIP or None
  sessionAffinity: None
  # -- Additional settings for the sessionAffinity
  sessionAffinityConfig:
    {}
    # clientIP:
    #   timeoutSeconds: 300

# -- ServiceAccount configuration
# @default -- [Documentation](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)
serviceAccount:
  # -- Specifies whether a ServiceAccount should be created
  create: true
  # -- The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the common.names.fullname template
  name: ""
  # -- Additional Service Account annotations (evaluated as a template)
  annotations: {}
  # -- Automount service account token for the server service account
  automountServiceAccountToken: false

# -- Configuration resources for prometheus metrics
# @default -- [Documentation](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/getting-started/design.md)
metrics:
  # -- Enable the export of Prometheus metrics
  enabled: false
  # -- Dedicated Kubernetes Service for dial-core metrics configuration
  # @default -- -
  service:
    # -- dial-core metrics service type
    type: ClusterIP
    # -- dial-core metrics service port
    ports:
      # -- dial-core metrics service port
      http: 9464
    nodePorts:
      # -- Node port for metrics
      # NOTE: choose port between <30000-32767>
      http: ""
    # -- dial-core metrics service Cluster IP
    # clusterIP: None
    clusterIP: ""
    # -- dial-core metrics service Load Balancer IP
    loadBalancerIP: ""
    # -- dial-core metrics service Load Balancer sources
    loadBalancerSourceRanges:
      []
      # - 10.10.10.0/24
    # -- dial-core metrics service external traffic policy
    # [Documentation](http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip)
    externalTrafficPolicy: Cluster
    # -- Additional custom annotations for dial-core metrics service
    annotations:
      {}
      # prometheus.io/scrape: "true"
      # prometheus.io/port: "{{ .Values.metrics.service.port }}"
    # -- Extra ports to expose in dial-core metrics service (normally used with the `sidecars` value)
    extraPorts: []
    # -- Control where client requests go, to the same pod or round-robin
    # Values: ClientIP or None
    sessionAffinity: None
    # -- Additional settings for the sessionAffinity
    sessionAffinityConfig:
      {}
      # clientIP:
      #   timeoutSeconds: 300
  # -- Prometheus Operator ServiceMonitor configuration
  # @default -- [Documentation](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/getting-started/design.md#servicemonitor)
  serviceMonitor:
    # -- if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)
    enabled: false
    # -- Namespace in which Prometheus is running
    namespace: ""
    # -- Additional custom annotations for the ServiceMonitor
    annotations: {}
    # -- Extra labels for the ServiceMonitor
    labels: {}
    # -- The name of the label on the target service to use as the job name in Prometheus
    jobLabel: ""
    # -- honorLabels chooses the metric's labels on collisions with target labels
    honorLabels: false
    # -- Specify service metrics port
    port: "http-metrics"
    # -- Specify metrics path
    path: "/metrics"
    # -- Interval at which metrics should be scraped.
    # e.g: interval: 10s
    interval: ""
    # -- Timeout after which the scrape is ended
    # e.g: scrapeTimeout: 10s
    scrapeTimeout: ""
    # -- Specify additional relabeling of metrics
    metricRelabelings: []
    # -- Specify general relabeling
    relabelings: []
    # -- Prometheus instance selector labels
    selector:
      {}
      # prometheus: my-prometheus

# -- Ingress configuration
# @default -- [Documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/)
ingress:
  # -- Enable ingress record generation for container
  enabled: false
  # -- Ingress path type
  pathType: Prefix
  # -- IngressClass that will be be used to implement the Ingress
  # [Documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)
  ingressClassName: ""
  # -- Default path for the ingress record
  # NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
  path: /
  # -- Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  # Use this parameter to set the required annotations for [cert-manager](https://cert-manager.io/docs/usage/ingress/#supported-annotations)
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: cluster-issuer-name
  # -- Change default name of service for the ingress record
  serviceName: ""
  # -- An array with hostname(s) to be covered with the ingress record
  hosts:
    - dial-core.local
  # -- TLS configuration for additional hostname(s) to be covered with this ingress record (evaluated as a template)
  # [Documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls)
  tls:
    []
    # - hosts:
    #     - dial-core.local
    #   secretName: dial-core.local-tls
  # -- An array with additional arbitrary paths that may need to be added to the ingress under the main host
  extraPaths:
    []
    # - path: /*
    #   pathType: ImplementationSpecific
    #   backend:
    #     service:
    #       name: ssl-redirect
    #       port:
    #         name: use-annotation
  # -- An array with additional hostname(s) to be covered with the ingress record
  extraRules:
    []
    # - name: dial-core-tmp.local
    #   path: "/foo"                       # Optional, default - "/"
    #   pathType: ImplementationSpecific   # Optional, default - Prefix
    #   serviceName: foo
    #   servicePort: 80

### Logger configuration ###
logger:
  # -- Enable/disable logger
  enabled: false
  # -- Section to configure the image.
  # @default -- [Documentation](https://kubernetes.io/docs/concepts/containers/images/)
  image:
    # -- Image registry for logger component
    registry: docker.io
    # -- Image repository for logger component
    repository: timberio/vector
    # -- Image tag for logger component
    tag: 0.45.0-alpine
    # -- Image digest for logger component in the way sha256:aa....
    digest: ""
    # -- Image pull policy for logger component
    pullPolicy: IfNotPresent
    # -- Optionally specify an array of imagePullSecrets.
    # Secrets must be manually created in the namespace.
    pullSecrets:
      []
      # - myRegistryKeySecretName

  # -- Container resource requests and limits for logger component.
  # [Documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources: {}
  # -- Key-value pairs extra environment variables to add to logger component
  env: {}
  # -- Key-value pairs extra environment variables to add in environment variables from secrets to dial-extension
  secrets: {}
  extraEnvVarsSecret: ""

  # Original vector image allows only root user to write to /var/lib/vector directory.
  # Create a different directory to run vector without root privileges.
  command:
    - /bin/sh
  args:
    - "-c"
    - "mkdir -p /var/tmp/vector && exec vector --config /etc/vector/vector.yaml"

  containerSecurityContext:
    # -- Enabled logger container's Security Context
    enabled: true
    # -- Set logger SELinux options in container
    seLinuxOptions: {}
    # -- Set logger container's Security Context runAsUser
    runAsUser: 1001
    # -- Set logger container's Security Context runAsGroup
    runAsGroup: 1001
    # -- Set logger containers' Security Context runAsNonRoot
    runAsNonRoot: true
    # -- Set logger container's Security Context privileged
    privileged: false
    # -- Set logger containers' Security Context runAsNonRoot
    readOnlyRootFilesystem: false
    # -- Set logger container's Security Context allowPrivilegeEscalation
    allowPrivilegeEscalation: false
    # -- Set logger container's Security Context capabilities
    capabilities:
      drop: ["ALL"]
    # -- Set logger container's Security Context seccomp profile
    seccompProfile:
      type: "RuntimeDefault"
  # -- Configuration file for setting up the logger component (evaluated as a template)
  # @default -- [Documentation](https://vector.dev/docs/reference/configuration/)
  config: |
    data_dir: "/var/tmp/vector"

    sources:
      core_logs:
        type: "file"
        max_line_bytes: 100000000
        oldest_first: true
        include:
          - /app/log/*.log

    sinks:
      console:
        inputs:
          - core_logs
        type: console
        target: "stdout"
        encoding:
          codec: "text"
  extraVolumeMounts:
    []
    # - name: logger
    #   mountPath: /var/log/nginx
    # - name: logger-config
    #   mountPath: /etc/vector/vector.yaml
    #   subPath: vector.yaml

redis:
  # -- Enable/disable Redis component
  enabled: true
  # HACK: Temporally use Bitnami "legacy" repository by default cause they'll delete old versions from the primary one
  # ref: https://github.com/bitnami/charts/issues/35164
  global:
    security:
      allowInsecureImages: true
  image:
    repository: bitnamilegacy/redis-cluster
  redis:
    resources:
      requests:
        memory: 2Gi
      limits:
        memory: 2Gi
    # -- Whether to use AOF Persistence mode or not. We keep only RDB persistence (enabled by default)
    useAOFPersistence: "no"
    configmap: |-
      # Intentional gap from 2gb to 2Gi left
      maxmemory 2gb
      # Evict using approximated LFU, only keys with an expire set
      maxmemory-policy volatile-lfu
  cluster:
    # -- The number of master nodes should always be >= 3, otherwise cluster creation will fail
    nodes: 3
    replicas: 0
    update:
      currentNumberOfNodes: 3
      currentNumberOfReplicas: 0
