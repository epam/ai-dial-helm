{{ template "chart.header" . }}

{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

## TL;DR

```console
helm repo add dial https://charts.epam-rail.com
helm install my-release dial/dial-core
```

## Prerequisites

- Helm 3.8.0+
- PV provisioner support in the underlying infrastructure (optional)
- Ingress controller support in the underlying infrastructure (optional)

{{ template "chart.requirementsSection" . }}

## Installing the Chart

To install the chart with the release name `my-release`:

```console
helm repo add dial https://charts.epam-rail.com
helm install my-release dial/dial-core
```

The command deploys dial-core on the Kubernetes cluster in the default configuration. The [Parameters](#parameters) section lists the parameters that can be configured during installation.

## Uninstalling the Chart

To uninstall/delete the `my-release` deployment:

```console
helm delete my-release
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

**NOTE**: Persistent Volumes created by StatefulSets won't be deleted automatically

## Parameters

Specify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example:

```console
helm install my-release dial/dial-core --set image.tag=latest
```

Alternatively, a YAML file that specifies the values for the above parameters can be provided while installing the chart. For example:

```yaml
# values.yaml file content
image:
  tag: latest
```

```console
helm install my-release dial/dial-core -f values.yaml
```

**NOTE**: You can use the default [values.yaml](values.yaml)

{{ template "chart.valuesSection" . }}

## Upgrading

### To 4.1.2

> [!TIP]
> If you don't use custom Core logger configuration, disregard the information below and proceed with Helm upgrade as usual.
> [!CAUTION]
> The upgrade require Core logger configuration update.
Add `data_dir: "/var/tmp/vector"` to `core.logger.config` if custom vector config is used. This is required to run vector without root privileges.

**Example:**

```
core:
  logger:
    config: |
      data_dir: "/var/tmp/vector"
```

### To 4.0.0

Bumping the major version to highlight Redis `7.2.4` --> `7.4.1` upgrade. No actions required, however you may want to check [RedisÂ® 7.4 release notes](https://raw.githubusercontent.com/redis/redis/7.4/00-RELEASENOTES) for specific details.

As for `redis-cluster` helm chart, following security defaults changed:

- `runAsGroup` is changed from `0` to `1001`
- `readOnlyRootFilesystem` is set to `true`

This could potentially break any customization or init scripts used in your deployment. If this is the case, change the default values to the previous ones.

### To 3.0.0

**IMPORTANT**: Manual Action Required for Self-Managed Secrets

In this version we have to reflect `ai-dial-core` [application configuration parameters renaming](https://github.com/epam/ai-dial-core/pull/455) in version `0.15.1+` by renaming several values in this chart.

- `configuration.encryption.password` parameter is renamed to `configuration.encryption.secret`
- `configuration.encryption.salt` parameter is changed to `configuration.encryption.key`

#### How to upgrade to version 3.0.0

a) If using encryption Kubernetes secret created by the chart:

1. Update the parameters you have in your current deployment values (e.g. `values.yaml` file or set via `--set`) according to the changes below:
     - `configuration.encryption.password` --> `configuration.encryption.secret`
     - `configuration.encryption.salt` --> `configuration.encryption.key`
1. Delete the `*-encryption` secret, e.g. (replace `my-release` with the actual release name):

    ```console
    kubectl delete secret my-release-dial-core-encryption
    ```

1. Proceed with the helm upgrade as usual, e.g.:

    ```console
    helm upgrade my-release dial/dial-core -f values.yaml
    ```

b) If using your own managed Kubernetes secret (`configuration.encryption.existingSecret` is set):

1. Rename keys in your existing secret:

    - `aidial.encryption.password` --> `aidial.encryption.secret`
    - `aidial.encryption.salt` --> `aidial.encryption.key`

    You can update your existing secret to rename or move the keys using the following one-liner command (replace `<your-existing-secret-name>` and `<namespace>` with the actual values):

    ```console
      kubectl get secret <your-existing-secret-name> -o yaml -n <namespace> | jq '.data["aidial.encryption.secret"] = .data["aidial.encryption.password"] | .data["aidial.encryption.key"] = .data["aidial.encryption.salt"] | del(.data["aidial.encryption.password"], .data["aidial.encryption.salt"])' | kubectl replace -f -
    ```

1. Proceed with the helm upgrade as usual, e.g.:

    ```console
    helm upgrade my-release dial/dial-core -f values.yaml
    ```

## Redis

The application uses a Redis database to store its data. By default, the Helm chart will deploy a [Redis cluster](https://github.com/bitnami/charts/tree/main/bitnami/redis-cluster) with recommended settings and auto-generated password as a dependency.\
**You may have to set the `redis.password` value with the password generated by the Helm chart during the first installation.**

For other configuration options, refer to redis-cluster Helm chart [documentation](https://github.com/bitnami/charts/tree/main/bitnami/redis-cluster#parameters).

### Use an external Redis database

However, you may want the application to connect to an external Redis database rather than a database provided by the Helm chart - for example, when using a cloud-managed service, or when running a single database server for all your applications. To do this, set the `redis.enabled` parameter to `false` and specify the credentials for the external database using the `env.aidial.redis.*` parameters. Here is an example:

```yaml
redis:
  enabled: false
env:
  aidial.redis.clusterServersConfig.nodeAddresses: '["redis://myexternalhost:6379"]'
secrets:
  aidial.redis.clusterServersConfig.password: "mypassword"
```
